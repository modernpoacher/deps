"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.gitRevParse=gitRevParse;exports.gitCheckout=gitCheckout;exports.gitPull=gitPull;exports.gitPush=gitPush;exports.gitAdd=gitAdd;exports.gitCommit=gitCommit;var _debug=_interopRequireDefault(require("debug"));var _child_process=require("child_process");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const OPTIONS={maxBuffer:1024*2000};const log=(0,_debug.default)('@modernpoacher/deps');const use=n=>{const log=(0,_debug.default)(`@modernpoacher/deps:${n}`);return v=>{log(v.replace(/(\s+)$/g,''));};};function out(n,d){const log=(0,_debug.default)(`@modernpoacher/deps:${n}`);return function out(v){const s=v.trim();if(d===s)return;return log(s);};}function err(n,d){const log=(0,_debug.default)(`@modernpoacher/deps:${n}`);return function err(v){const s=v.trim();if(d===s||s.toLowerCase().startsWith('fatal: not a git repository'))return;return log(s);};}function gitRevParse(d='.'){log('gitRevParse');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)('git rev-parse --show-toplevel',{...OPTIONS,cwd:d},(e,v='')=>!e?resolve(v.trim()):reject(e));stdout.on('data',out('git-rev-parse',d));stderr.on('data',err('git-rev-parse',d));});}function gitCheckout(d='.',b='master'){log('gitCheckout');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)(`cd '${d}' && git checkout ${b}`,{...OPTIONS,cwd:d},(e,v)=>!e?resolve(v):reject(e));const log=use('git-checkout');stdout.on('data',log);stderr.on('data',log);});}function gitPull(d='.'){log('gitPull');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)(`cd '${d}' && git pull`,{...OPTIONS,cwd:d},(e,v)=>!e?resolve(v):reject(e));const log=use('git-pull');stdout.on('data',log);stderr.on('data',log);});}function gitPush(d='.'){log('gitPush');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)(`cd '${d}' && git push`,{...OPTIONS,cwd:d},(e,v)=>!e?resolve(v):reject(e));const log=use('git-push');stdout.on('data',log);stderr.on('data',log);});}function gitAdd(d='.',a='package.json package-lock.json'){log('gitAdd');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)(`cd '${d}' && git add ${a}`,{...OPTIONS,cwd:d},(e,v)=>!e?resolve(v):reject(e));const log=use('git-add');stdout.on('data',log);stderr.on('data',log);});}function gitCommit(d='.',m='Updated `package.json` &/ `package-lock.json`'){log('gitCommit');return new Promise((resolve,reject)=>{const{stdout,stderr}=(0,_child_process.exec)(`cd '${d}' && git commit -m '${m}'`,{...OPTIONS,cwd:d},(e,v)=>!e?resolve(v):reject(e));const log=use('git-commit');stdout.on('data',log);stderr.on('data',log);});}