"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.hasConfiguration=hasConfiguration;exports.getConfiguration=getConfiguration;exports.getDepsExact=getDepsExact;exports.getDeps=getDeps;exports.transform=transform;exports.getDependency=exports.isExact=exports.getPeerDependencies=exports.getBundleDependencies=exports.getOptionalDependencies=exports.getDevDependencies=exports.getProdDependencies=void 0;var _debug=_interopRequireDefault(require("debug"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('@modernpoacher/deps:common');const getProdDependencies=({dependencies={}}={})=>dependencies;exports.getProdDependencies=getProdDependencies;const getDevDependencies=({devDependencies={}}={})=>devDependencies;exports.getDevDependencies=getDevDependencies;const getOptionalDependencies=({optionalDependencies={}}={})=>optionalDependencies;exports.getOptionalDependencies=getOptionalDependencies;const getBundleDependencies=({bundleDependencies=[]}={})=>bundleDependencies;exports.getBundleDependencies=getBundleDependencies;const getPeerDependencies=({peerDependencies}={})=>peerDependencies;exports.getPeerDependencies=getPeerDependencies;const isExact=v=>/^\d/.test(v);exports.isExact=isExact;function hasConfiguration(configuration,name){if(Reflect.has(configuration,name)){const version=Reflect.get(configuration,name);return isExact(version);}}function getConfiguration(configuration,name){if(Reflect.has(configuration,name)){const version=Reflect.get(configuration,name);return version;}}const getDependency=({name='@modernpoacher/deps',version='latest'}={})=>`${name}@${version}`;exports.getDependency=getDependency;function getDepsExact(v,c){log('getDepsExact');return Object.entries(v).reduce((accumulator,[name,version])=>isExact(version)?accumulator.concat({name,version:hasConfiguration(c,name)?getConfiguration(c,name):'latest'}):accumulator,[]);}function getDeps(v){log('getDeps');return Object.entries(v).reduce((accumulator,[name,version])=>isExact(version)?accumulator:accumulator.concat({name,version:'latest'}),[]);}function transform(v,c={}){log('transform');return Array.isArray(v)?v.map(getDependency).join(String.fromCharCode(32)).trim():getDependency(v);}